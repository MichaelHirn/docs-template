layout: layouts/landing.njk
title: Lume, the static site generator for Deno
description: Support for multiple file formats like Markdown, YAML, JavaScript, TypeScript, JSX, Nunjucks etc.
header:
  title: Lume is a simple & elegant static site generator for Deno

install:
  title: "Run the following to install:"
  code: deno run -A https://deno.land/x/lume/install.ts
  footer: |
    Make sure [you have Deno installed](https://deno.land/manual/getting_started/installation).
  url: /tutorial/your-first-page/

usage:
  - title: Supports any template engine
    description: |
      Create pages using Markdown, Nunjucks, Liquid, JSX, TSX, JavaScript, TypeScript, Pug, Eta… or add your own engine easily.
    code: |
      <lume-code>

      ```md { title=".md" }
      # Galician municipalities

      - O Pino
      - Tordoia
      - Ordes
      - Cedeira
      ```
      ```html { title=".njk" }
      <h1>{{ title }}</h1>

      <ul>
        {% for item in items %}
        <li>{{ item | safe }}</li>
        {% endfor %}
      </ul>
      ```
      ```html { title=".liquid" }
      <h1>{{ title }}</h1>

      <ul>
        {% for item in items %}
        <li>{{ item }}</li>
        {% endfor %}
      </ul>
      ```
      ```jsx { title=".jsx" }
      export default function ({ title, items }) {
        return <>
          <h1>{ title }</h1>

          <ul>
            { items.map((item) => <li>{ item }</li>)}
          </ul>
        </>;
      }
      ```
      ```js { title=".tmpl.js" }
      export default function ({ title, items }) {
        return `
        <h1>${ title }</h1>

        <ul>
          ${ items.map((item) => `<li>${ item }</li>`)}
        </ul>
        `;
      }
      ```
      ```ts { title=".tmpl.ts" }
      interface Data {
        title: string;
        items: string[];
      }

      export default function ({ title, items }: Data): string {
        return `
        <h1>${ title }</h1>

        <ul>
          ${ items.map((item) => `<li>${ item }</li>`)}
        </ul>
        `;
      }
      ```

      ```yml { title=".pug" }
      h1= title
      ul
        each item in items
          li= item
      ```

      ```html { title=".eta" }
      <h1><%= title %></h1>

      <ul>
      <% for (const item of items) { %>
        <li><%= item %></li>
      <% }) %>
      </ul>
      ```

      </lume-code>

  - title: Store the data in your favorite format
    description: |
      Store your data using static formats like JSON or YAML. Use JavaScript or TypeScript to get the data from a Database or API.
    code: |
      <lume-code>

      ```yaml { title=".yml" }
      title: Galician municipalities
      items:
        - O Pino
        - Tordoia
        - Ordes
        - Cedeira
      ```
      ```json { title=".json" }
      {
        "title": "Galician municipalities",
        "items": [
          "O Pino",
          "Tordoia",
          "Ordes",
          "Cedeira"
        ]
      }
      ```
      ```js { title=".js" }
      export const title = "Galician municipalities";
      export const items = [
        "O Pino",
        "Tordoia",
        "Ordes",
        "Cedeira"
      ];
      ```
      ```ts { title=".ts" }
      const title = "Galician municipalities";

      const response = await fetch("https://example.com/galician-minicipalities.json");
      const groups = (await response.json()) as string[];
      export { title, items };
      ```

      </lume-code>
  
  - title: Process HTML pages and assets
    description: |
      Processors can compile and optimize assets like CSS or JavaScript. They can also transform the HTML code using the DOM API.
    code: |
      <lume-code>

      ```js { title="Process assets" }
      site.process([".css"], (file) => {
        file.content = customTransform(file.content);
      })
      ```
      ```js { title="DOM API" }
      site.process([".html"], (page) => {
        page.document.querySelectorAll("h1", (title) => {
          title.innerText = title.innerText.toUpperCase();
        })
      })
      ```

      </lume-code>

  - title: Run your scripts and listen for events
    description: |
      You can create custom scripts like in NPM and execute them from the CLI or after any event.
    code: |
      <lume-code>

      ```js { title="Script creation" }
      site.script("deploy", "rsync -r _site/ user@host.com:/site");
      ```
      ```js { title="Events" }
      site.addEventListener("afterBuild", "deploy");
      site.addEventListener("afterBuild", () => console.log("site build"));
      ```
      ```sh { title="Script runner" }
      lume run deploy
      ```

      </lume-code>

features:
  - title: It's Deno!
    img: /icons/deno.svg
    description: Forget about managing thousands of packages in node_modules or complex bundlers. Lume only installs what you need. Clean, fast and secure.

  - title: Zero runtime overhead
    img: /icons/stack.svg
    description: Lume only exports your code. No extra JavaScript for the client to load content or hydratation generated magically.

  - title: Deploy anywhere
    img: /icons/deploy.svg
    description: Static sites can be hosted (for free) anywhere GitHub/GitLab Pages, Deno Deploy, Vercel, Netlify… [More info](/docs/advanced/deployment.md)
